generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
}

model group {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  description String        @db.VarChar(255)
  image       String?       @db.VarChar(255)
  groupeusers groupeusers[]
  reminder    reminder[]
}

model groupeusers {
  IdG   Int
  IdU   String @db.VarChar(255)
  group group  @relation(fields: [IdG], references: [id], onDelete: Cascade, map: "fk_GroupeUsers_Group_1")
  user  User   @relation(fields: [IdU], references: [email], onDelete: Cascade, map: "fk_GroupeUsers_User_1")

  @@id([IdG, IdU])
  @@index([IdU], map: "fk_GroupeUsers_User_1")
}

model reminder {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  dateRendu   DateTime @db.DateTime(0)
  description String   @db.VarChar(10000)
  couleur     Int
  groupId     Int
  group       group    @relation(fields: [groupId], references: [id], onDelete: Cascade, map: "fk_Reminder_Group_1")

  @@index([groupId], map: "fk_Reminder_Group_1")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groupeusers groupeusers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}